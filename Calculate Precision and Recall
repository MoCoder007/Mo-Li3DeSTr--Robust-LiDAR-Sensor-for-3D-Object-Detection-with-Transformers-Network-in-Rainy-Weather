import numpy as np

# Convert list to numpy array for easier manipulation
tensor_data = np.array([
[35.22883549134244, 15.060333649786088, 1.454492026254255, 0.18362450900683802],
[42.859157605093294, 8.93698544620152, 1.6842127273230512, 0.3454060632473086],
[45.50188871269314, 16.981896910948304, 1.8478807967656428, 0.3597342832515109],
[31.80815262131192, 6.31197395013387, 1.2176560220913677, 0.4511616950938673],
[18.364829131204996, 2.4794766490162132, 0.7462922040053694, 0.31536518509245365],
[44.193121010876126, 0.32001064573243504, 1.7474413919739316, 0.4223173914449311],
[23.72100625569958, 0.4567855668703954, 1.0008489895266794, 0.23823563480787086],
[43.755779239069085, 0.2073110161738775, 1.6838981861844076, 0.1705266474671306],
[45.36101651082298, 17.953444520235397, 1.8227412735718904, 0.11249801871207177],
[34.645589363664556, 6.225977831043358, 1.4220768881986465, 0.4363599000529058],
[24.66709117929763, 5.669470133038874, 1.0781905694837572, 0.2887743684274079],
[13.327136199776113, 8.760205653805153, 0.6930701593421098, 0.2613614573364114],
[31.342076754401415, 16.575962662554872, 1.3346265850393553, 0.5925099086357665],
[37.87558709106148, 0.18816030849998444, 1.516732623734622, 0.3351880663718823],
[32.09829195415088, 2.159875124201966, 1.2911277373100682, 0.5399975923176448],
[23.65123516334625, 8.03278463271476, 0.9565926254265429, 0.26194855244061827],
[17.423139928062756, 2.758795898657798, 0.8140869974622801, 0.10437185730134357],
[30.171533461326916, 16.64722394122108, 1.3402264218659787, 0.18171980074097066],
[48.444898987456824, 10.779959570073066, 1.8285877356103415, 0.5617353652036641],
[37.84789411346495, 8.369030372324012, 1.516845731608719, 0.49256865416436724],
[37.004028029054865, 0.05535669609376534, 1.4063147277037187, 0.5434606857889822],
[23.120247528284732, 0.04182852398387773, 0.9781229713703882, 0.16600658650924888],
[22.052862782573218, 2.5922086022370783, 0.9224054440248834, 0.294445381388817],
[34.85143488453215, 4.521013752613556, 1.4266136945534031, 0.12831357927171083],
[31.530777274435618, 12.216879391374185, 1.2550712964873783, 0.6530568505103826],
[26.268465133531148, 4.2630910464823035, 1.0474275323994915, 0.4662340385506012],
[9.07676759391808, 2.668149179919473, 0.4992834183891187, 0.21888682068533344],
[19.38899176443583, 0.12770127774546078, 0.9198578701647059, 0.18728434614584832],
[34.237381823329144, 14.927980385369413, 1.4463529547541252, 1.3717121077827974],
[30.329472826772204, 4.555934003186949, 1.2330821333986175, 0.506251097719355],
[47.86299544362371, 11.75811459453423, 1.8790984435136378, 0.2861907939858314],
[25.58534629140766, 6.040716331435884, 1.0530792914964642, 0.6276969810098819],
[49.71763850332445, 2.0945573855775894, 1.80336253716936, 0.3669202725626439],
[6.164739085705676, 3.5144333988708967, 0.46916536089165156, 1.23516587655990653],
[35.95782329606067, 8.549844663882142, 1.4294256553224045, 0.43276511263721196],
[46.377086043177535, 16.550620488539483, 1.8391308588838406, 0.6970467896108138],
[21.319658049970954, 0.2588925180399765, 0.9781247223695414, 0.4020627678458649],
[26.341576853262126, 5.452676534619917, 1.082330005375922, 0.37290548607752083],
[29.574722469805735, 39.107893488843835, 1.8461695068830157, 0.5284999157837764],
[8.771858042035968, 3.246198666775146, 0.5145323788583351, 0.3682383481018272]

])

ground_truth = np.array([
    [35.1210, 15.0780, 1.5020, 0.2700],
    [42.8230, 8.9540, 1.6880, 0.0000],
    [45.5070, 16.9720, 1.8510, 0.0000],
    [31.7860, 6.3270, 1.3050, 0.1600],
    [18.4610, 2.5010, 0.8390, 0.0000],
    [44.2040, 0.2930, 1.7040, 0.1800],
    [23.6760, 0.4800, 1.0100, 0.1600],
    [43.7610, 0.2210, 1.6890, 0.4100],
    [45.3160, 17.8810, 1.8560, 0.0000],
    [34.7210, 6.1790, 1.4020, 0.2400],
    [24.7150, 5.6040, 1.0660, 0.3700],
    [13.3060, 8.7570, 0.7480, 0.3300],
    [31.3120, 16.6500, 1.4080, 0.1900],
    [37.8220, 0.1880, 1.4880, 0.4200],
    [32.0480, 2.1720, 1.2950, 0.2700],
    [23.7100, 7.9900, 1.0550, 0.0800],
    [17.4540, 2.7830, 0.8070, 0.1500],
    [30.1930, 16.6060, 1.3740, 0.2000],
    [48.4340, 10.7670, 1.8870, 0.2000],
    [37.9000, 8.3570, 1.5210, 0.1000],
    [37.0150, 0.1250, 1.4610, 0.3600],
    [23.0170, 0.0680, 0.9870, 0.3800],
    [22.0760, 2.5730, 0.9610, 0.3600],
    [34.9210, 4.4740, 1.4000, 0.3800],
    [31.4230, 12.2190, 1.3490, 0.1500],
    [26.3330, 4.2970, 1.1110, 0.2800],
    [9.0970, 2.6720, 0.5300, 0.3400],
    [19.2990, 0.0830, 0.8620, 0.2700],
    [34.1650, 14.9220, 1.4700, 0.1600],
    [30.2620, 4.5520, 1.2440, 0.3800],
    [47.8910, 11.6780, 1.8760, 0.1700],
    [25.6040, 6.0610, 1.0990, 0.1600],
    [49.7240, 2.1310, 1.8920, 0.1500],
    [6.2530, 3.4930, 0.4510, 0.3800],
    [35.9320, 8.5160, 1.4580, 0.1600],
    [46.3760, 16.5540, 1.8740, 0.1000],
    [21.3460, 0.2960, 0.9310, 0.3900],
    [26.2480, 5.4350, 1.1160, 0.2800],
    [29.5470, 39.1300, 1.8670, 0.1700],
    [8.6880, 3.2020, 0.5220, 0.0000]
])

confidence_threshold = 0.5  # Define your confidence threshold

# Filter predictions based on the confidence threshold
filtered_predictions = tensor_data[tensor_data[:, 3] >= confidence_threshold]

def calculate_iou(pred_box, gt_box):
    # This function should calculate the Intersection over Union (IoU) for 3D bounding boxes.
    # Placeholder implementation:
    dist = np.linalg.norm(pred_box[:3] - gt_box[:3])
    return 1.0 / (1.0 + dist)  # Simplified and not an actual IoU calculation

def calculate_metrics(filtered_predictions, ground_truth, iou_threshold=0.5):
    TP = 0
    FP = 0
    FN = 0
    
    for gt in ground_truth:
        match_found = False
        for pred in filtered_predictions:
            iou = calculate_iou(pred, gt)
            if iou >= iou_threshold:
                TP += 1
                match_found = True
                break
        if not match_found:
            FN += 1
            
    FP = len(filtered_predictions) - TP
    precision = TP / (TP + FP) if TP + FP > 0 else 0
    recall = TP / (TP + FN) if TP + FN > 0 else 0
    accuracy = TP / (TP + FP + FN) if (TP + FP + FN) > 0 else 0
    
    return precision, recall, accuracy

# Calculate IoU threshold. This value is typically chosen based on the application.
recision, recall, accuracy = calculate_metrics(filtered_predictions, ground_truth, iou_threshold=0.5)

# Calculate precision and recall
precision, recall, accuracy = calculate_metrics(filtered_predictions, ground_truth, iou_threshold=0.5)

print(f'Precision: {precision:.4f}, Recall: {recall:.4f}, Accuracy: {accuracy:.4f}')
